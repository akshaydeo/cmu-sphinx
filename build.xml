<?xml version="1.0" encoding="UTF-8"?>

<project basedir="." default="all" name="Sphinx-4">

    <!-- ********************************************************** -->
    <!-- *                                                        * -->
    <!-- * Where to find things...                                * -->
    <!-- *                                                        * -->
    <!-- ********************************************************** -->
    <path id="libs">
        <fileset dir="lib" includes="**/jsapi.jar"/>
    </path>
    <property name="src_dir"		value="."/>
    <property name="build_dir"		value="bld"/>
    <property name="classes_dir"	value="${build_dir}/classes"/>
    <property name="lib_dir"            value="lib"/>
    <property name="bin_dir"            value="bin"/>
    <property name="javadoc_dir"	value="javadoc"/>
    <property name="javadoc_check_dir"  value="${build_dir}/javadoc_check"/>
    <property name="javadoc_zip"	value="javadoc.zip"/>

    <property name="build_model_dir"
              value="${build_dir}/models/edu/cmu/sphinx/model/acoustic"/>
    <property name="model_class_dir"
              value="${src_dir}/edu/cmu/sphinx/linguist/acoustic/tiedstate"/>


    <!-- ********************************************************** -->
    <!-- *                                                        * -->
    <!-- * For generating the WSJ and TIDIGITS models.            * -->
    <!-- *                                                        * -->
    <!-- ********************************************************** -->

    <property name="wsj_name" value="WSJ_8gau_13dCep_16k_40mel_130Hz_6800Hz"/>
    <property name="wsj_loader_name" value="WSJLoader"/>
    <property name="wsj_data_dir" value="models/acoustic/wsj"/>

    <property name="tidigits_name"
              value="TIDIGITS_8gau_13dCep_16k_40mel_130Hz_6800Hz"/>
    <property name="tidigits_loader_name" value="TIDIGITSLoader"/>
    <property name="tidigits_data_dir" value="models/acoustic/tidigits"/>


    <!-- ********************************************************** -->
    <!-- *                                                        * -->
    <!-- * For generating any model JARS from Sphinx-3 models.    * -->
    <!-- *                                                        * -->
    <!-- ********************************************************** -->

    <property name="model_name" value="${wsj_name}"/>
    <property name="model_loader_name" value="${wsj_loader_name}"/>
    <property name="model_data_dir" value="${wsj_data_dir}"/>



    <!-- Load the environment -->
    <property environment="env"/>

    <condition property="javadoc_level" 
                value="${access}">
         <isset property="access"/>
    </condition>
    <condition property="javadoc_level" 
                value="public">
       <not>
         <isset property="access"/>
       </not>
    </condition>

    <!-- ********************************************************** -->
    <!-- *                                                        * -->
    <!-- * Determine which sources should be compiled depending   * -->
    <!-- * on the availability of lib/jsapi.jar.  This creates a  * -->
    <!-- * property called "patternset_to_compile" and sets its   * -->
    <!-- * val to either "all_files" or "no_jsapi", which refers  * -->
    <!-- * to the name of a patternset. The value of              * -->
    <!-- * srcs_to_compile will be used in the javac target as a  * -->
    <!-- * patternset refid.                                      * -->
    <!-- *                                                        * -->
    <!-- ********************************************************** -->


    <!-- TODO - we are excluding a number of packages temporarily
      from the build. This is a step along the road to refactoring
      the system. The excluded packages have not yet been refactored
      -->


    <patternset id="all_files" 
                includes="edu/**,com/**"
                excludes="edu/cmu/sphinx/research/distributed/**,
		edu/cmu/sphinx/research/bushderby/**,
                edu/cmu/sphinx/trainer/**,
                edu/cmu/sphinx/linguist/acoustic/tiedstate/trainer/**"
                />

    <patternset id="edu" 
                includes="edu/**"
	        excludes="com/**,
                edu/cmu/sphinx/research/distributed/**,
                edu/cmu/sphinx/research/bushderby/**,
                edu/cmu/sphinx/trainer/**,
                edu/cmu/sphinx/linguist/acoustic/tiedstate/trainer/**,
                "/>

    <patternset id="no_jsapi" 
                includes="edu/**"
	        excludes="com/**,
                edu/cmu/sphinx/research/**,
                edu/cmu/sphinx/trainer/**,
                edu/cmu/sphinx/linguist/acoustic/tiedstate/trainer/**,
                edu/cmu/sphinx/jsapi/**"/>
             
    <target name="set_patternset_to_compile">
        <condition property="patternset_to_compile"
                   value="all_files">
            <available file="lib/jsapi.jar"/>
        </condition>
        <condition property="patternset_to_compile"
                   value="no_jsapi">
            <not>
                <available file="lib/jsapi.jar"/>
            </not>
        </condition>
    </target>


    <!-- ********************************************************** -->
    <!-- *                                                        * -->
    <!-- * Determine which sources should be documented using     * -->
    <!-- * javadoc depending on the availability of               * -->
    <!-- * lib/jsapi.jar. This creates a property called          * -->
    <!-- * "patternset_to_doc" and sets its val to either         * -->
    <!-- * "all" or "no_jsapi", which refers to the name of a     * -->
    <!-- * patternset.                                            * -->
    <!-- *                                                        * -->
    <!-- ********************************************************** -->

    <target name="set_patternset_to_doc">
        <condition property="patternset_to_doc"
                   value="edu">
            <available file="lib/jsapi.jar"/>
        </condition>
        <condition property="patternset_to_doc"
                   value="no_jsapi">
            <not>
                <available file="lib/jsapi.jar"/>
            </not>
        </condition>
    </target>

    <!-- ********************************************************** -->
    <!-- *                                                        * -->
    <!-- * Handle JSAPI:                                          * -->
    <!-- *                                                        * -->
    <!-- *    1) If a jsapi.jar file can be found, use it and     * --> 
    <!-- *       compile all the sources.                         * -->
    <!-- *                                                        * -->
    <!-- *    2) If a jsapi.jar file cannot be found, issue a     * -->
    <!-- *       message and just compile the sources that do     * -->
    <!-- *       not depend upon jsapi.jar.                       * -->
    <!-- *                                                        * -->
    <!-- ********************************************************** -->
    <target name="check_jsapi_default.isPresent">
        <!-- Complicated way of doing a "if... else"                 -->
        <!-- Check if the environment variable is set. If it is, set -->
        <!-- the local variable to the same value.                   -->
        <condition property="EXTERNAL_JSAPI_LOCATION" 
                   value="${env.EXTERNAL_JSAPI_LOCATION}">
            <isset property="env.EXTERNAL_JSAPI_LOCATION"/>
        </condition>

        <!-- If environment variable is not set, set the local       -->
        <!-- variable to a default value.                            -->
        <condition property="EXTERNAL_JSAPI_LOCATION" 
                   value="/lab/speech/sphinx4/lib/jsapi.jar">
            <not>
                 <isset property="env.EXTERNAL_JSAPI_LOCATION"/>
            </not>
        </condition>
        <available file="${EXTERNAL_JSAPI_LOCATION}" 
                   property="jsapi_default.isPresent"/>
    </target>

    <target name="copy_jsapi_jar" if="jsapi_default.isPresent">
        <copy file="${EXTERNAL_JSAPI_LOCATION}" tofile="lib/jsapi.jar"/>
    </target>

    <target name="check_jsapi_jar.isPresent"
            depends="check_jsapi_default.isPresent,copy_jsapi_jar">
        <available file="lib/jsapi.jar" property="jsapi_jar.isPresent"/>
    </target>

    <target name="issue_jsapi_warning"
            unless="jsapi_jar.isPresent">
        <echo>

Cannot find lib/jsapi.jar needed to build Java Speech API
(JSAPI) support for Sphinx-4.  Will not build any sources
that require jsapi.jar.  If you'd like to enable JSAPI
support, please extract jsapi.jar by running jsapi.sh or 
jsapi.exe from the lib directory.
        </echo>
    </target>

    <target name="handle_jsapi"
            depends="check_jsapi_jar.isPresent,
                     issue_jsapi_warning,
                     set_patternset_to_compile,
                     set_patternset_to_doc"/>


    <!-- ********************************************************** -->
    <!-- *                                                        * -->
    <!-- * Builds srcs, jars, demos                               * -->
    <!-- *                                                        * -->
    <!-- ********************************************************** -->
    <target name="all"
	    depends="compile_src,jars,demos,create_models"
	    description="Build everything">
	<echo message="Build complete."/>
    </target>


    <!-- ********************************************************** -->
    <!-- *                                                        * -->
    <!-- * Builds just the srcs.                                  * -->
    <!-- *                                                        * -->
    <!-- ********************************************************** -->
    <target name="compile_src"
	    depends="handle_jsapi,create_model_classes"
	    description="Build just the srcs">
	<mkdir dir="${classes_dir}"/>
	<javac debug="true"
	       source="1.4"
 	       srcdir="${src_dir}"
	       deprecation="true"
	       destdir="${classes_dir}">
            <patternset refid="${patternset_to_compile}"/>
	    <classpath refid="libs"/>
	</javac>
	<mkdir dir="${build_model_dir}"/>
	<move todir="${build_model_dir}">
	      <fileset dir="${classes_dir}/edu/cmu/sphinx/model/acoustic"/>
	</move>
	<antcall target="delete_model_classes"/>
    </target>


    <!-- ********************************************************** -->
    <!-- *                                                        * -->
    <!-- * Builds just the demos.                                 * -->
    <!-- *                                                        * -->
    <!-- ********************************************************** -->
    <target name="demos"
	    depends="compile_src"
	    description="Compiles and jars the demos">
        <ant antfile="demo.xml"/>
    </target>


    <!-- ********************************************************** -->
    <!-- *                                                        * -->
    <!-- * Generates the jar files                                * -->
    <!-- *                                                        * -->
    <!-- ********************************************************** -->
    <target name="jars"
	    depends="sphinx4_jar,audiotool_jar"
	    description="Builds all the jar files"/>


    <!-- sphinx4.jar -->
    <property name="sphinx4_jar" value="${lib_dir}/sphinx4.jar"/>

    <target name="sphinx4_jar" 
	    depends="compile_src"
	    description="Create ${lib_dir}/sphinx4.jar">
        <mkdir dir="${lib_dir}"/>
        <jar destfile="${sphinx4_jar}" 
	     manifest="${src_dir}/edu/cmu/sphinx/sphinx4.manifest"
	     compress="true"
             excludes="edu/cmu/sphinx/tools/**">
            <fileset dir="${classes_dir}"/>
        </jar>
    </target>

    <!-- audiotool.jar -->
    <property name="audiotool_jar" value="${bin_dir}/audiotool.jar"/>

    <target name="audiotool_jar" 
	    depends="compile_src"
	    description="Create ${bin_dir}/audiotool.jar">
        <mkdir dir="${bin_dir}"/>
        <jar destfile="${audiotool_jar}" 
	     manifest="${src_dir}/edu/cmu/sphinx/tools/audio/Manifest"
	     compress="true">
            <fileset dir="${classes_dir}"
		     includes="edu/cmu/sphinx/tools/audio/*"/>
            <fileset dir="${src_dir}"
		     includes="edu/cmu/sphinx/tools/audio/spectrogram.config.xml"/>
        </jar>
    </target>


    <!-- ********************************************************** -->
    <!-- *                                                        * -->
    <!-- * Generates an acoustic model JAR from a Sphinx-3 model  * -->
    <!-- * directory.                                             * -->
    <!-- *                                                        * -->
    <!-- ********************************************************** -->

    <target name="s3_model_to_s4"
            description="Generates an acoustic model JAR from a Sphinx-3 model directory.">
        <antcall target="create_my_model_classes">
	    <param name="my_model_name" value="${model_name}"/>
	    <param name="my_loader_name" value="${model_loader_name}"/>
        </antcall>
	<antcall target="compile_src"/>
	<antcall target="create_my_model">
	    <param name="my_model_data_dir" value="${model_data_dir}"/>
	    <param name="my_model_name" value="${model_name}"/>
	    <param name="my_model_loader_name" value="${model_loader_name}"/>
        </antcall>
    </target>


    <!-- ********************************************************** -->
    <!-- *                                                        * -->
    <!-- * Create/Delete the acoustic model class files.          * -->
    <!-- *                                                        * -->
    <!-- ********************************************************** -->

    <target name="create_model_classes"
            depends="create_wsj_model_classes,create_tidigits_model_classes"
	    description="Creates all the model class files.">
    </target>

    <target name="delete_model_classes"
            description="Deletes all the model class files.">
	<delete file="${wsj_class}"/>
	<delete file="${model_class_dir}/${wsj_loader_name}.java"/>
	<delete file="${tidigits_class}"/>
	<delete file="${model_class_dir}/${wsj_loader_name}.java"/>
    </target>

    <target name="create_wsj_model_classes"
            description="Creates the WSJ model class files.">
	<antcall target="create_my_model_classes">
	    <param name="my_model_name" value="${wsj_name}"/>
	    <param name="my_loader_name" value="${wsj_loader_name}"/>
        </antcall>
    </target>

    <target name="create_tidigits_model_classes"
            description="Creates the TIDIGITS model class files.">
	<antcall target="create_my_model_classes">
	    <param name="my_model_name" value="${tidigits_name}"/>
	    <param name="my_loader_name" value="${tidigits_loader_name}"/>
        </antcall>
    </target>

    <target name="create_my_model_classes"
            description="Creates the model class files.">
        <copy file="models/acoustic/model.template"
	      tofile="${model_class_dir}/${my_model_name}.java"/>
	<replace file="${model_class_dir}/${my_model_name}.java"
	         value="${my_model_name}">
	    <replacetoken>TemplateModel</replacetoken>
	</replace>
        <copy file="models/acoustic/loader.template"
	      tofile="${model_class_dir}/${my_loader_name}.java"/>
	<replace file="${model_class_dir}/${my_loader_name}.java"
	         value="${my_loader_name}">
	    <replacetoken>TemplateLoader</replacetoken>
	</replace>
    </target>


    <!-- ********************************************************** -->
    <!-- *                                                        * -->
    <!-- * Builds all the acoustic model files.                   * -->
    <!-- *                                                        * -->
    <!-- ********************************************************** -->
    <target name="create_models"
            depends="create_wsj_model,create_tidigits_model"
            description="Creates all the acoustic model JARS.">
    </target>


    <!-- ********************************************************** -->
    <!-- *                                                        * -->
    <!-- * Builds the WSJ acoustic model files.                   * -->
    <!-- *                                                        * -->
    <!-- ********************************************************** -->
    <target name="create_wsj_model"
	    description="Creates the WSJ acoustic model JAR.">
        <antcall target="create_my_model">
	    <param name="my_model_data_dir" value="${wsj_data_dir}"/>
	    <param name="my_model_name" value="${wsj_name}"/>
	    <param name="my_model_loader_name" value="${wsj_loader_name}"/>
        </antcall>
    </target>


    <!-- ********************************************************** -->
    <!-- *                                                        * -->
    <!-- * Builds the TIDIGITS acoustic model files.              * -->
    <!-- *                                                        * -->
    <!-- ********************************************************** -->
    <target name="create_tidigits_model"
	    description="Creates the TIDIGITS acoustic model JAR.">
	<antcall target="create_my_model">
	    <param name="my_model_data_dir" value="${tidigits_data_dir}"/>
	    <param name="my_model_name" value="${tidigits_name}"/>
	    <param name="my_model_loader_name"
	           value="${tidigits_loader_name}"/>
        </antcall>
    </target>


    <!-- ********************************************************** -->
    <!-- *                                                        * -->
    <!-- * Builds an acoustic model JAR.                          * -->
    <!-- *                                                        * -->
    <!-- ********************************************************** -->
    <target name="create_my_model"
            depends="compile_src"
	    description="Creates an acoustic model JAR.">	    
	<delete includeEmptyDirs="true">
            <fileset dir="${build_model_dir}" includes="**"
	             excludes="**/*.class"/>
        </delete>
        <copy todir="${build_model_dir}">
	      <fileset dir="${my_model_data_dir}"/>
        </copy>
	<jar destfile="${lib_dir}/${my_model_name}.jar">
	     <fileset dir="${build_dir}/models"
	         includes="edu/cmu/sphinx/model/acoustic/${my_model_name}.class,edu/cmu/sphinx/model/acoustic/${my_model_loader_name}.class"/>
             <fileset dir="${build_dir}/models"
	              includes="edu/cmu/sphinx/model/acoustic/**"
		      excludes="edu/cmu/sphinx/model/acoustic/*.class"/>
             <manifest>
	        <attribute name="Main-Class"
		    value="edu.cmu.sphinx.model.acoustic.${my_model_name}"/>
		<attribute name="Class-Path" value="sphinx4.jar"/>
             </manifest>
        </jar>
	<delete includeEmptyDirs="true">
            <fileset dir="${build_model_dir}" includes="**"
	             excludes="**/*.class"/>
        </delete>
    </target>


    <!-- ********************************************************** -->
    <!-- *                                                        * -->
    <!-- * Generates the javadoc                                  * -->
    <!-- *                                                        * -->
    <!-- ********************************************************** -->
    <property name="javadoc_desc" value="Sphinx-4"/>

    <target name="javadoc" 	    
	    depends="handle_jsapi"
	    description="Generate javadoc, optionally with '-Daccess=private'">
	<delete dir="${javadoc_dir}"/>
        <mkdir dir="${javadoc_dir}"/>
        <javadoc sourcepath="${src_dir}"
	         source="1.4"
		 additionalparam="-breakiterator"
		 destdir="${javadoc_dir}" 
		 overview="${src_dir}/overview.html"
		 windowtitle="${javadoc_desc}"
                 doctitle="${javadoc_desc}"
                 access="${javadoc_level}">
            <link href="http://java.sun.com/products/java-media/speech/forDevelopers/jsapi-doc"
                  offline="true"
                  packagelistLoc="lib/jsapi" />
            <packageset dir="${src_dir}" defaultexcludes="yes">
                  <patternset refid="${patternset_to_doc}"/>
            </packageset>
	    <classpath refid="libs"/>
        </javadoc>
    </target>

    <!-- ********************************************************** -->
    <!-- *                                                        * -->
    <!-- * Checks javadocs                                        * -->
    <!-- *                                                        * -->
    <!-- ********************************************************** -->

    <target name="javadoc_check" 	    
	    depends="handle_jsapi"
	    description="checks the javadocs">
        <mkdir dir="${javadoc_check_dir}"/>
        <javadoc sourcepath="${src_dir}"
		 additionalparam="-source 1.4"
		 packagenames="edu.*"
                 excludepackagenames="edu.cmu.sphinx.trainer"
		 destdir="${javadoc_check_dir}" 
		 overview="${src_dir}/overview.html"
                 doclet="com.sun.tools.doclets.doccheck.DocCheck"
                 docletpath="/lab/speech/java/doccheck1.2b2/doccheck.jar"
                 access="${javadoc_level}">
	    <classpath refid="libs"/>
        </javadoc>
    </target>


    <!-- ********************************************************** --> 
    <!-- *                                                        * -->
    <!-- * Deletes all build output and *~ file droppings         * -->
    <!-- *                                                        * -->
    <!-- ********************************************************** --> 
    <target name="clean" description="Delete all build output">
	<delete>
	    <fileset defaultexcludes="no" dir="." includes="**/*~"/>
	</delete>
	<delete dir="${build_dir}"/>
	<delete dir="${javadoc_dir}"/>
	<delete file="${lib_dir}/sphinx4.jar"/>
	<delete file="${lib_dir}/${wsj_name}.jar"/>
	<delete file="${lib_dir}/${tidigits_name}.jar"/>
    </target>

</project>
