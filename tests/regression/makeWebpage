#!/bin/sh
# Copyright 1999-2002 Carnegie Mellon University.  
# Portions Copyright 2002 Sun Microsystems, Inc.  
# Portions Copyright 2002 Mitsubishi Electronic Research Laboratories.
# All Rights Reserved.  Use is subject to license terms.
# 
# See the file "license.terms" for information on usage and
# redistribution of this file, and for a DISCLAIMER OF ALL 
# WARRANTIES.
#
# This script parses the regression log and outputs an HTML summary
#
# usage: makeWebpage < regression.log
#
# Field definitions: 
#   1) "test"
#   2) date
#   3) time
#   4) machine
#   5) System
#   6) testName 
#   7) who 
#   8) status
#   9) audioTime 
#  10) procTime 
#  11) words 
#  12) insertions 
#  13) deletions 
#  14) substitutions 
#  15) sentences 
#  16) correctSentences 
#  17) heapSize 
#  18) loadAverage 


gawk '

BEGIN {
    FS = "|"
    F_TEST = 1;
    F_DATE = 2;
    F_TIME = 3;
    F_MACHINE = 4;
    F_SYSTEM = 5;
    F_TEST_NAME = 6;
    F_WHO = 7;
    F_STATUS = 8;
    F_AUDIO_TIME = 9;
    F_PROC_TIME = 10;
    F_WORDS = 11;
    F_INSERTIONS = 12;
    F_DELETIONS = 13;
    F_SUBSTITUTIONS = 14;
    F_SENTENCES = 15;
    F_CORRECT_SENTENCES = 16;
    F_HEAP_SIZE = 17;
    F_LOAD_AVERAGE = 18;

    "./getHostname" | getline machine
}

$1 == "build" && $4 == machine {
    buildCount = buildCount + 1;
    buildData[buildCount] = $0;
}

$1 == "test"  && $4 == machine && $5 == "s4" {
    testCount[$F_TEST_NAME] = testCount[$F_TEST_NAME] + 1;
    testData[$F_TEST_NAME testCount[$F_TEST_NAME]] = $0;
    if (lastTestDate != $F_DATE) {
        lastTestDate = $F_DATE;
	lastTestCount = 0;
    } 
    lastTestData[lastTestCount++] = $F_TEST_NAME "|" testCount[$F_TEST_NAME];
}



$1 == "system"  && $2 == machine {
    machineDescription = $0;
}

$1 == "metrics"   {
    metrics = $0;
}

function dateAnchor(date) {
    return "<a href=\"" date ".html\">" date "</a>";
}

#####
# updates the data array with info for the given test
#
function updateData(testName, testCount) {
    split(testData[testName testCount], data);
}

####
# returns the word error rate for the given test
#
function getWER(testName, testCount,     _errors, _words) {
    updateData(testName, testCount);
    _errors = data[F_INSERTIONS] + data[F_DELETIONS] + data[F_SUBSTITUTIONS];
    _words = data[F_WORDS];

    if (_words == "" || _words == 0) {
        return "N/A";
    } else {
	return _errors / _words * 100;
    }
}

####
# gets the speed for the given test
#
function getSpeed(testName, testCount, _audioTime, _procTime) {
    updateData(testName, testCount);
    _audioTime = data[F_AUDIO_TIME];
    _procTime = data[F_PROC_TIME];

    if (_audioTime == "" || _procTime == "") {
        return "N/A";
    } else {
	return _procTime / _audioTime;
    }
}

####
# returns the accuracy status for the given test
#
function getAccuracyStatus(testName, count) {
  thisWER = getWER(testName, count);
  prevWER = getWER(testName, count - 1);

  if (thisWER == "N/A") {
      return "<td bgcolor=#ffcccc>" "N/A" "</td>";
  }

  if (prevWER == "N/A") {
      return "<td>" thisWER "</td>";
  }

  if (thisWER == prevWER) {
      return "<td>" thisWER "</td>";
  }

  if (thisWER > prevWER) {
      return "<td bgcolor=#ffcccc>" thisWER "</td>";
  }

  if (thisWER < prevWER) {
      return "<td bgcolor=#99ff99>" thisWER "</td>";
  }
  return "<td>" thisWER "</td>";
}

####
# returns the speed status for the given test
#
function getSpeedStatus(testName, count, _slowThreshold, _fastThreshold) {
  thisSpeed = getSpeed(testName, count);
  prevSpeed = getSpeed(testName, count - 1);

  if (thisSpeed == "N/A") {
      return "<td bgcolor=#ffcccc>" "N/A" "</td>";
  }

  if (prevSpeed == "N/A") {
      return "<td>" thisSpeed "</td>";
  }

  if (thisSpeed == prevSpeed) {
      return "<td>" thisSpeed "</td>";
  }

  _slowThreshold = prevSpeed + prevSpeed * .1;
  _fastThreshold = prevSpeed - prevSpeed * .1;

  if (thisSpeed > _slowThreshold) {
      return "<td bgcolor=#ffcccc>" thisSpeed "</td>";
  }

  if (thisSpeed  < _fastThreshold) {
      return "<td bgcolor=#99ff99>" thisSpeed "</td>";
  }
      return "<td>" thisSpeed "</td>";
}

####
# return the status of the test
#
function getRunStatus(testName, count) {
    updateData(testName, count);
    status = data[F_STATUS];

    if (status == "OK") {
      return "<td>" status "</td>";
    } else {
      return "<td bgcolor=#ffcccc>" status "</td>";
    }
}



function printSingleTest(testName, testCount) {
    updateData(testName, testCount);
    date = data[F_DATE];
    runTime = data[F_PROC_TIME];
    status = getRunStatus(testName, testCount);
    accuracy = getAccuracyStatus(testName, testCount);
    speed = getSpeedStatus(testName, testCount);
    print "<tr>"
    print "<td>" dateAnchor(date)  "</td>"
    print status;
    print accuracy;
    print speed;
    print "<td>" fmtTime(runTime)"</td>";
    print "</tr>"
}

function printLongSingleTest(testName, testCount) {
    updateData(testName, testCount);
    date = data[F_DATE];
    status = getRunStatus(testName, testCount);
    accuracy = getAccuracyStatus(testName, testCount);
    speed = getSpeedStatus(testName, testCount);
    print "<tr>";
    print "<td>" dateAnchor(date)  "</td>";
    print "<td><a href=#" testName ">" testName  "</a></td>";
    print status;
    print accuracy;
    print speed;
    print "</tr>";
}


function fmtTime(seconds) {
    if (seconds == "N/A") {
	return seconds;
    }
    hours = int(seconds / 3600);
    seconds -= hours * 3600;

    mins = int(seconds / 60);
    seconds -= mins * 60;

    return sprintf("%02.2d:%02.2d:%02.2d", hours, mins, seconds);
}

function printTestResults(testName) {
    print("<br><br>");
    print("<a name=" testName "></a>");
    print "<table align=center cellpadding=2 cellspacing=2 border=1 width=60%>";
    print "<tbody>";
    print "<tr align=center>";
    print "<td valign=top rowspan=1 colspan=5 bgcolor=#ccccff>";
    print "<big><b>" testName "</b></big>";
    print "<br>"
    print "</td>";
    print "</tr>";
    print "<tr>";
      print "<td valign=top bgcolor=#ccffff><b>Date<br> </b></td>";
      print "<td valign=top bgcolor=#ccffff><b>Run Status<br> </b></td>";
      print "<td valign=top bgcolor=#ccffff><b>Word Error Rate<br> </b></td>";
      print "<td valign=top bgcolor=#ccffff><b>Time (X Realtime)<br> </b></td>";
      print "<td valign=top bgcolor=#ccffff><b>Test Time<br> </b></td>";

      for (i = 1; i <= testCount[testName]; i++) {
         printSingleTest(testName, i);
      }
    print "</tr>";
    print "<tbody>";
    print "</table>";
    print "<br>";
}

####
# Prints summary info
#
function printSummaryInfo() {
    split(finalBuildRecord, data);
    print "Host:             " data[4]
    print "Date:             " data[2]
    print "Build Status:     " data[7]
    print "Build Time:       " data[8] " Secs"
    print "Run Time:         " data[9] " Secs"
    print ""
    print ""
}

# Field definitions: 
#   1) "build"
#   2) date
#   3) time
#   4) machine
#   5) who 
#   6) 'make' 
#   7) status
#   8) buildTime 
#   9) testTime 
#

function printBuildHistory() {
   print "<hr><br>"
   print("<a name=build_history></a>");
   print "<table cellpadding=2 cellspacing=2 border=1 width=80% align=center>";
   print "<tbody>";
   print "<tr align=center>";
   print "<td valign=top rowspan=1 colspan=5";
   print "    bgcolor=#ccccff><big><b>Build History<br>";
   print "</b></big></td> </tr>";
   print "<tr>";
   print "<td valign=top bgcolor=#99ffff align=center><b>Date<br>";
   print "</b></td>";
   print "<td valign=top bgcolor=#99ffff align=center><b>Test Name<br>";
   print "</b></td>";
   print "<td valign=top bgcolor=#99ffff align=center><b>Build Time<br>";
   print "</b></td>";
   print "<td valign=top bgcolor=#99ffff align=center><b>Test";
   print "Time</b><br>";
   print "</td>";
   print "<td valign=top bgcolor=#99ffff align=center><b>Status<br>";
   print "</b></td>";
   print "</tr>";

   for (i = 1; i <= buildCount; i++) {
        split(buildData[i], data);

        print("<tr>");
        print "<td>" dateAnchor(data[2]) "</td>";
        print "<td>" data[10] "</td>";
	print "<td>" fmtTime(data[8]) "</td>";
	print "<td>" fmtTime(data[9]) "</td>";

	status = data[7];

	if (status == "OK") {
	    print "<td>" "OK" "</td>";
	} else {
            print "<td bgcolor=#ffcccc>" status "</td>";
	}
       print("</tr>");
   }
   print "</tbody>";
   print "</table>";
}


function printMachineDescription() {
    split(machineDescription, data);
    "date" | getline theDate;

    print("<br><br>");
    print("<table cellpadding=2 cellspacing=2 border=0 width=90%");
    print("align=center>");
    print("<tbody>");
    print("<tr align=center>");
    print("<td rowspan=1 colspan=2 bgcolor=#ccccff><big><b>Tests");
    print("   run on " machine "<br>");
    print("</b></big></td>");
    print(" </tr>");
    print(" <tr>");
    print(" <td ><b>Test Date </b></td> <td> " theDate " </td></tr>");
    print(" <tr><td ><b>Test Details </b></td> <td> " )
    print("<a href=http://cmusphinx.sourceforge.net/cgi-bin/twiki/view/Sphinx4/?topic=TaskStatus> Sphinx 4 Twiki</a></td>");
    print(" </tr>");

    print(" <td ><b>CPUs </b></td> <td> " data[3] " </td>");
    print(" </tr>");
    print(" <tr>");
      print(" <td ><b>Architecture </b></td> <td >" data[7] " </td>");
    print(" </tr>");
    print(" <tr>");
      print(" <td ><b>Clock Speed </b></td> <td >" data[5] "MHz</td>");
    print(" </tr>");
    print(" <tr>");
      print(" <td ><b>Memory </b></td> <td >" data[6] "MB</td>");
    print(" </tr>");
    print(" <tr>");
      print(" <td ><b>Cache </b></td> <td >" data[4] "KB</td>");
    print(" </tr>");
    print(" <tr>");
      print(" <td ><b>OS </b></td> <td >" data[8] "</td>");
    print(" </tr>");
        
    print("</tbody>");
    print("</table>");
}


# "metrics|$date|$fileCount|$javaFileCount|$classCount|$lineCount|$packageCount|"
function printMetrics() {
   print("<a name=metrics></a>");
    split(metrics, data);

    print("<br><br>");
    print("<table cellpadding=2 cellspacing=2 border=0 width=90%");
    print("align=center>");
    print("<tbody>");
    print("<tr align=center>");
    print("<td rowspan=1 colspan=2 bgcolor=#ccccff><big><b>");
    print(" Sphinx 4 Metrics  <br>");
    print("</b></big></td>");
    print(" </tr>");
    print(" <tr>");
    print(" <td ><b>Number of files </b></td> <td> " data[3] " </td>");
    print(" </tr>");
    print(" <tr>");
      print(" <td ><b>Number of source files </b></td> <td >" data[4] " </td>");
    print(" </tr>");
    print(" <tr>");
      print(" <td ><b>Number of classes</b></td> <td >" data[5] "</td>");
    print(" </tr>");
    print(" <tr>");
      print(" <td ><b>Source lines of code</b></td> <td >" data[6] "</td>");
    print(" </tr>");
    print(" <tr>");
      print(" <td ><b>Packages </b></td> <td >" data[7] "</td>");
    print(" </tr>");
    print("</tbody>");
    print("</table>");
    print "<br>";

}

function printHeader() {
    print "<html>";
    print "<head>";
    print "   <title>S4 Regression Test Results</title>";
    print "   <meta http-equiv=content-type ";
    print "       content=text/html;charset=ISO-8859-1>";
    print "</head>";
    print "<body>";
}

function printFooter() {
    print "</body>";
    print "</html>";
}


function printKey() {
    print "<br>";
    print("<table cellpadding=2 cellspacing=2 border=0 ");
    print("align=center>");
    print("<tr align=center>");
    print("<td rowspan=1 colspan=2 bgcolor=#ccccff><big><b>");
    print(" Color Key <br>"); print("</b></big></td>");
    print("<tbody>");
    print  "<tr><td bgcolor=#99ff99> Improved result </td>";
    print "<td bgcolor=#ffcccc> Degraded result </td> </tr>";
    print("</tbody>");
    print("</table>");
    print "<br>";
}

function printTitle() {
    print "<table cellpadding=0 cellspacing=0 border=0 width=100%";
    print "    align=center bgcolor=#ccccff>";
    print "<tbody>";
    print "<tr>";
    print "<td valign=top align=center><br>";
    print "<big><big><b>Sphinx 4 Regression Test";
    print "Summary</b></big></big><br>";
    print "<br>";
    print "</td>";
    print "</tr>";
    print "</tbody>";
    print "</table>";
    print "<br>";
}

function printDetailedTestTitle() {
   print "<hr><br>"
    print "<table cellpadding=0 cellspacing=0 border=0 width=100%";
    print "    align=center bgcolor=#ccccff>";
    print "<tbody>";
    print "<tr>";
    print "<td valign=top align=center>";
    print "<big><b>Detailed Test Results"
    print "</b></big>";
    print "</td>";
    print "</tr>";
    print "</tbody>";
    print "</table>";
    print "<br>";
}

# prints the latest tests

function printLatestTestResults(  _testName, _testCount) {
    print("<br><br>");
    print("<a name=latest_results></a>");
    print "<table align=center cellpadding=2 cellspacing=2 border=1 width=80%>";
    print "<tbody>";
    print "<tr align=center>";
    print "<td valign=top rowspan=1 colspan=5 bgcolor=#ccccff>";
    print "<big><b>" "Latest Test Results" "</b></big>";
    print "<br>"
    print "</td>";
    print "</tr>";
    print "<tr>";
    print "<td valign=top bgcolor=#ccffff><b>Date<br> </b></td>";
    print "<td valign=top bgcolor=#ccffff><b>Test Name<br> </b></td>";
    print "<td valign=top bgcolor=#ccffff><b>Run Status<br> </b></td>";
    print "<td valign=top bgcolor=#ccffff><b>Word Error Rate<br> </b></td>";
    print "<td valign=top bgcolor=#ccffff><b>Time (X Realtime)<br> </b></td>";

    for (i = 0; i < lastTestCount; i++) {
        split(lastTestData[i], thisData);
	_testName = thisData[1];
	_testCount = thisData[2];
	printLongSingleTest(_testName, _testCount);
    }
    print "</tr>";
    print "<tbody>";
    print "</table>";
    print "<br>";
}

# prints the table of contents

function printTOC() {
    print("<h2> Table of Contents</h2>");
    # print("<small>");
    print("<ul>");
    print("<li><a href=#latest_results> Latest Results </a></li>");
    print("<li><a href=#build_history> Build History </a></li>");
    print("<li>Detailed Test Results</li>");
    print("<ul>");
    for (i in testCount) {
	print("<li><a href=#" i ">"  i "</a></li>") | "sort";
    }
    close("sort");
    print("</ul>");
    print("</ul>");
    # print("</small>");
}

function printHeaderTable() {
    print "<table align=center cellpadding=2 cellspacing=2 border=0 width=100%>";
    print("<tr>");

	print("<td valign=top bgcolor=#ddddff>\n");
	   printTOC();
	print("</td>\n");

	print("<td valign=top>\n");
	    printMachineDescription();
	    printMetrics();
	    printKey();
	print("</td>\n");

    print("</tr>");
    print("</table>")
}

END {
    print("<html>");
    printHeader();
    printTitle();
    printHeaderTable()
    printLatestTestResults();
    printDetailedTestTitle();
    for (i in testCount) {
        printTestResults(i);
    }
    printBuildHistory();
    printFooter();
}

'  $*

