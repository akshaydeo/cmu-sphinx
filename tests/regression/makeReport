# Copyright 1999-2002 Carnegie Mellon University.  
# Portions Copyright 2002 Sun Microsystems, Inc.  
# Portions Copyright 2002 Mitsubishi Electronic Research Laboratories.
# All Rights Reserved.  Use is subject to license terms.
# 
# See the file "license.terms" for information on usage and
# redistribution of this file, and for a DISCLAIMER OF ALL 
# WARRANTIES.
#
# This script parses the regression log and presents a quick report
# Field definitions: 
# Field definitions: 
#   1) "test"
#   2) date
#   3) time
#   4) machine
#   5) System
#   6) testName 
#   7) who 
#   8) status
#   9) audioTime 
#  10) procTime 
#  11) words 
#  12) insertions 
#  13) deletions 
#  14) substitutions 
#  15) sentences 
#  16) correctSentences 
#  17) heapSize 
#  18) loadAverage 

gawk '

BEGIN {
    FS = "|"
    F_TEST = 1;
    F_DATE = 2;
    F_TIME = 3;
    F_MACHINE = 4;
    F_SYSTEM = 5;
    F_TEST_NAME = 6;
    F_WHO = 7;
    F_STATUS = 8;
    F_AUDIO_TIME = 9;
    F_PROC_TIME = 10;
    F_WORDS = 11;
    F_INSERTIONS = 12;
    F_DELETIONS = 13;
    F_SUBSTITUTIONS = 14;
    F_SENTENCES = 15;
    F_CORRECT_SENTENCES = 16;
    F_HEAP_SIZE = 17;
    F_LOAD_AVERAGE = 18;
    "hostname" | getline machine
}

$1 == "build" && $4 == machine {
    finalBuildRecord = $0;
}

$1 == "test"  && $4 == machine && $5 == "s4" {
    testCount[$F_TEST_NAME] = testCount[$F_TEST_NAME] + 1;
    testData[$F_TEST_NAME testCount[$F_TEST_NAME]] = $0;
}


#####
# updates the data array with info for the given test
#
function updateData(testName, testCount) {
    split(testData[testName testCount], data);
}

####
# returns the word error rate for the given test
#
function getWER(testName, testCount,     _errors, _words) {
    updateData(testName, testCount);
    _errors = data[F_INSERTIONS] + data[F_DELETIONS] + data[F_SUBSTITUTIONS];
    _words = data[F_WORDS];

    if (_words == 0) {
        return "N/A";
    } else {
	return _errors / _words * 100;
    }
}

####
# gets the speed for the given test
#
function getTime(testName, testCount, _audioTime, _procTime) {
    updateData(testName, testCount);
    _audioTime = data[F_AUDIO_TIME];
    _procTime = data[F_PROC_TIME];

    if (_audioTime == "" || _procTime == "") {
        return "N/A";
    } else {
	return _procTime / _audioTime;
    }
}

####
# returns the accuracy status for the given test
#
function getAccuracyStatus(testName) {
  thisWER = getWER(testName, testCount[testName]);
  prevWER = getWER(testName, testCount[testName] - 1);

  if (thisWER == "N/A") {
      return "N/A";
  }

  if (prevWER == "N/A") {
      return "OK - " thisWER "";
  }

  if (thisWER == prevWER) {
      return "OK - " thisWER "";
  }

  if (thisWER > prevWER) {
      
      return "REGRESSED - increased from " prevWER  " to " thisWER ""
  }

  if (thisWER < prevWER) {
      return "IMPROVED  - decreased from " prevWER  " to " thisWER ""
  }

  return "OK - " thisWER "";
}

####
# returns the speed status for the given test
#
function getTimeStatus(testName, _slowThreshold, _fastThreshold) {
  thisTime = getTime(testName, testCount[testName]);
  prevTime = getTime(testName, testCount[testName] - 1);

  if (thisTime == "N/A") {
      return "N/A";
  }

  if (prevTime == "N/A") {
      return "OK - " thisTime " ";
  }

  if (thisTime == prevTime) {
      return "OK - " thisTime " ";
  }

  _slowThreshold = prevTime + prevTime * .1;
  _fastThreshold = prevTime - prevTime * .1;

  if (thisTime > _slowThreshold) {
      return "REGRESSED - increased from " prevTime " to " \
      	thisTime " " ;
  }

  if (thisTime  < _fastThreshold) {
      return "IMPROVED  - decreased from " prevTime " to " \
      	thisTime " ";
  }
  return "OK - " thisTime " ";
}

####
# return the status of the test
#
function getRunStatus(testName) {
    updateData(testName, testCount[testName]);
    return data[F_STATUS];
}

function fmtTime(seconds) {
    if (seconds == "N/A") {
	return seconds;
    }
    hours = int(seconds / 3600);
    seconds -= hours * 3600;

    mins = int(seconds / 60);
    seconds -= mins * 60;

    return sprintf("%02.2d:%02.2d:%02.2d", hours, mins, seconds);
}

####
# Prints summary info
#
function printSummaryInfo() {
    split(finalBuildRecord, data);
    print "Host:             " data[4]
    print "Date:             " data[2]
    print "Build Status:     " data[7]
    print "Build Time:       " fmtTime(data[8])
    print "Run Time:         " fmtTime(data[9])
    print ""
    print ""
}

END {

    "date" | getline date
    print ""
    print "Sphinx 4 Regression Test Summary for " date
    print "================================================================="
    printSummaryInfo();

    for (i in testCount) {
        print i;
	print "    Status            "  getRunStatus(i);
	print "    Accuracy (WER %)  "  getAccuracyStatus(i);
	print "    Time (X Realtime) "  getTimeStatus(i);
	printf("\n");
    }
    print ""
    print ""
    print "Complete test details at: ";
    print ""
    print "    http://cmusphinx.sourceforge.net/regression_report.html"
    print ""
}

'  $*

