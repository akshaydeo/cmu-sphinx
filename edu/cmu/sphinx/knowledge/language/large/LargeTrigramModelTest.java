/*
 * Copyright 1999-2002 Carnegie Mellon University.  
 * Portions Copyright 2002 Sun Microsystems, Inc.  
 * Portions Copyright 2002 Mitsubishi Electronic Research Laboratories.
 * All Rights Reserved.  Use is subject to license terms.
 * 
 * See the file "license.terms" for information on usage and
 * redistribution of this file, and for a DISCLAIMER OF ALL 
 * WARRANTIES.
 *
 */

package edu.cmu.sphinx.knowledge.language.large;

import edu.cmu.sphinx.knowledge.language.LanguageModel;
import edu.cmu.sphinx.knowledge.language.WordSequence;

import edu.cmu.sphinx.util.LogMath;
import edu.cmu.sphinx.util.SphinxProperties;
import edu.cmu.sphinx.util.Utilities;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.InputStreamReader;

import java.net.URL;

import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.ArrayList;
import java.util.StringTokenizer;

import edu.cmu.sphinx.util.Timer;


/**
 * Reads a binary language model file generated by the 
 * CMU-Cambridge Statistical Language Modelling Toolkit.
 * 
 * Note that all probabilites in the grammar are stored in LogMath log
 * base format. Language Probabilties in the language model file are
 * stored in log 10  base. They are converted to the LogMath logbase.
 */
class LargeTrigramModelTest {

    public static void main(String[] args) throws Exception {

        String propsPath;
        String testFile = null;

        if (args.length == 0) {
            System.out.println
                ("Usage: java LargeTrigramModelTest <props_file> " +
                 "[<testFile>]");
        }
        
        propsPath = args[0];
        if (args.length == 2) {
            testFile = args[1];
        }

        SphinxProperties.initContext("test", new URL(propsPath));
        LargeTrigramModel lm = new LargeTrigramModel("test");

        LogMath logMath = LogMath.getLogMath("test");

        InputStream stream = new FileInputStream(testFile);

        BufferedReader reader = new BufferedReader
            (new InputStreamReader(stream));

        Timer timer = Timer.getTimer("test", "lmLookup");
        
        String input;
        
        List wordSequences = new LinkedList();
        
        while ((input = reader.readLine()) != null) {

            StringTokenizer st = new StringTokenizer(input);
            List list = new ArrayList();
            while (st.hasMoreTokens()) {
                String tok = (String) st.nextToken();
                list.add(tok.trim());
            }
            WordSequence wordSequence = new WordSequence(list);
            wordSequences.add(wordSequence);
        }

        int[] logScores = new int[wordSequences.size()];
        int s = 0;

        timer.start();

        for (Iterator i = wordSequences.iterator(); i.hasNext(); ) {
            lm.start();
            WordSequence ws = (WordSequence) i.next();
            logScores[s++] = (int)lm.getProbability(ws);
            lm.stop();
        }

        timer.stop();
        
        s = 0;
        for (Iterator i = wordSequences.iterator(); i.hasNext(); ) {
            WordSequence ws = (WordSequence) i.next();
            System.out.println(Utilities.pad(logScores[s++], 10) + " "+
                               getString(ws));
        }
        
        if (true) {
            long usedMemory = Runtime.getRuntime().totalMemory() - 
                Runtime.getRuntime().freeMemory();                
            System.out.println("Used memory: " + usedMemory + " bytes");
        }
        
        
        Timer.dumpAll();
    }

    public static String getString(WordSequence ws) {
        String line = ws.getWord(0);
        for (int i = 1; i < ws.size(); i++) {
            line += (" " + ws.getWord(i));
        }
        return line;
    }
}

